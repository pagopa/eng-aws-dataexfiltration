# data "aws_subnets" "lb" {
#   depends_on = [module.vpc_dataexfiltration]
#   filter {
#     name = "tag:Name"
#     values = [
#       "${local.project}-public-lb-1",
#       "${local.project}-public-lb-2",
#       "${local.project}-public-lb-3",
#     ]
#   }
# }

variable "lb_public_subnet" {
  type = list(string)
  default = [     "10.0.241.0/24",
     "10.0.242.0/24",
     "10.0.243.0/24", ]
}

resource "aws_subnet" "lb" {
  count = length(var.lb_public_subnet)
  availability_zone_id                           = data.aws_availability_zones.available.zone_ids[count.index]
  cidr_block                                     = var.lb_public_subnet[count.index]
  map_public_ip_on_launch                        = true
  vpc_id                                         = aws_vpc.main.id
}

resource "aws_route_table" "lb" {
  count = length(var.lb_public_subnet)
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.this.id
  }
}

resource "aws_route_table_association" "lb" {
  count = length(var.lb_public_subnet)

  subnet_id      = element(aws_subnet.lb[*].id, count.index)
  route_table_id = element(aws_route_table.lb[*].id, count.index)
}

resource "aws_security_group" "alb_sg" {
  name        = "${local.project}-alb-sg"
  description = "Allow HTTP/s traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_lb" "app_lb" {
  name               = "${local.project}-application-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = aws_subnet.lb[*].id

  enable_deletion_protection = false
}

output "lb_dns_name" {
  value = aws_lb.app_lb.dns_name
}

resource "aws_lb_target_group" "lambda_tg" {
  name        = "${local.project}-lambda-target-group"
  target_type = "lambda"
  vpc_id      = aws_vpc.main.id
}

# Listener ALB
resource "aws_lb_listener" "app_lb_listener" {
  load_balancer_arn = aws_lb.app_lb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type = "forward"
    target_group_arn = aws_lb_target_group.lambda_tg.arn
  }
}

# resource "aws_iam_role" "lambda_exec_role" {
#   name = "lambda_exec_role"

#   assume_role_policy = jsonencode({
#     Version = "2012-10-17"
#     Statement = [{
#       Action    = "sts:AssumeRole"
#       Effect    = "Allow"
#       Principal = {
#         Service = "lambda.amazonaws.com"
#       }
#     }]
#   })

#   # Permessi base per la Lambda
#   managed_policy_arns = [
#     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
#   ]
# }

# # Policy per permettere all'ALB di invocare la Lambda
# resource "aws_iam_role_policy_attachment" "lambda_invocation_permissions" {
#   role       = aws_iam_role.lambda_exec_role.name
#   policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
# }

# # Associa Lambda con il Target Group
resource "aws_lb_target_group_attachment" "lambda_attachment" {
  depends_on = [ aws_lambda_permission.with_lb ]
  target_group_arn = aws_lb_target_group.lambda_tg.arn
  target_id        = aws_lambda_function.lambda_proxy.arn
}

resource "aws_lambda_permission" "with_lb" {
  statement_id  = "AllowExecutionFromlb"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.lambda_proxy.function_name
  principal     = "elasticloadbalancing.amazonaws.com"
  source_arn    = aws_lb_target_group.lambda_tg.arn
}

# resource "aws_lb_target_group" "test" {
#   name        = "test"
#   target_type = "lambda"
# }

# resource "aws_lambda_function" "test" {
#   # ... other configuration ...
# }

# resource "aws_lb_target_group_attachment" "test" {
#   target_group_arn = aws_lb_target_group.test.arn
#   target_id        = aws_lambda_function.test.arn
#   depends_on       = [aws_lambda_permission.with_lb]
# }